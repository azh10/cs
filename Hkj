import java.io.File;
import java.util.*;

public class TopologicalSort
{
  
	boolean [][] bMatrix;
	
	int     []   to;
	int     []   from;
	int          result;
	
	
	public TopologicalSort(String filename) throws Exception
	{
		Scanner in = new Scanner(new File(filename));
		
		while( in.hasNext() ){
	
			int pages = in.nextInt();
			int temp;
			int numOfEdges = in.nextInt();
			
			int N = Math.max( pages+1, numOfEdges );
			bMatrix = new boolean[N][N];
			to   = new int[N];
			from = new int[N];
			
			if( pages != 0 && numOfEdges != 0 ){
			  
  			for( int i=0; i < numOfEdges; i++ ){
  				temp = in.nextInt();
					bMatrix[temp][in.nextInt()] = true;
  			}
  			
  			// the 0's indices store if there are multiple possiblities
  			for( int i=1; i<N; i++ ){
  			  for( int j=1; j<N; j++ ){
  			    if( bMatrix[j][i] ){
  			      to[j]++; to[0]++;
  			      from[i]++; from[0]++;
  			    }
  			  }
  			  if( from[i] > 1 )
  			      bMatrix[0][0] = true;
  			}
  			
  			result = sourceRemoval();
  			System.out.println( result );
  			
			}
		}
		in.close();
	}
	
	public int sourceRemoval( ){
	  
	  int cycleloop = 0;
	  int temp = bMatrix.length -1;
	  
	  while( temp > 0 ){
  	  
  	  if( ++cycleloop > 3 * bMatrix.length ) return 0;
  	  
  	  for( int i=1; i<bMatrix.length; i++ ){
  	    //if col is empty remove its row
  	    if( from[i] == 0 ) {
    	    from[i]--; temp--;
    	    cycleloop = 0;
  	      
  	      for( int j=0; j<bMatrix.length; j++ ){
  	        if( bMatrix[i][j] ){
  	          from[j]--;
  	          bMatrix[i][j] = false;
  	        }
  	      }
  	      
  	    }
  	    
  	  }
  	  
	  }
	  
	  return ( bMatrix[0][0] )? 2 : 1 ;
	}
	
	public static void main(String [] args) throws Exception
	{
		TopologicalSort g = new TopologicalSort("input.txt");
	}
	
}
